# Production Dockerfile for React Frontend with DiffSynth Enhanced UI
FROM node:18-alpine as builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production --legacy-peer-deps

# Copy source code
COPY . .

# Build the app with production optimizations
ENV NODE_ENV=production
ENV REACT_APP_API_URL=https://api.yourdomain.com
ENV REACT_APP_WS_URL=wss://api.yourdomain.com/ws
ENV GENERATE_SOURCEMAP=false

RUN npm run build

# Production stage with optimized nginx
FROM nginx:1.25-alpine

# Install additional tools for health checks
RUN apk add --no-cache curl

# Copy built app
COPY --from=builder /app/build /usr/share/nginx/html

# Copy optimized nginx configuration
COPY nginx.prod.conf /etc/nginx/nginx.conf

# Copy security headers configuration
COPY nginx-security.conf /etc/nginx/conf.d/security.conf

# Create nginx cache directories
RUN mkdir -p /var/cache/nginx/client_temp \
             /var/cache/nginx/proxy_temp \
             /var/cache/nginx/fastcgi_temp \
             /var/cache/nginx/uwsgi_temp \
             /var/cache/nginx/scgi_temp

# Set proper permissions
RUN chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /usr/share/nginx/html \
    && chmod -R 755 /usr/share/nginx/html

# Add health check endpoint
RUN echo '<!DOCTYPE html><html><body>OK</body></html>' > /usr/share/nginx/html/health

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]