# Production Nginx Configuration for DiffSynth Enhanced UI Frontend
user nginx-app;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /tmp/nginx/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Enhanced compression settings
    gzip_static on;
    
    # Brotli compression for pre-compressed files (if available)
    # brotli_static on;  # Uncomment if brotli module is available

    # Security headers
    include /etc/nginx/conf.d/security.conf;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/s;

    # CORS origin mapping for container communication
    map $http_origin $cors_origin {
        default "";
        "~^https?://localhost(:[0-9]+)?$" $http_origin;
        "~^https?://127\.0\.0\.1(:[0-9]+)?$" $http_origin;
        "~^https?://[^/]+\.localhost(:[0-9]+)?$" $http_origin;
        "~^https?://qwen\.localhost(:[0-9]+)?$" $http_origin;
        "~^https?://frontend\.localhost(:[0-9]+)?$" $http_origin;
        "~^https?://api\.localhost(:[0-9]+)?$" $http_origin;
    }

    # WebSocket connection upgrade mapping
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Enhanced cache settings with optimized expiration times
    map $sent_http_content_type $expires {
        default                         off;
        text/html                       epoch;
        text/css                        1y;
        application/javascript          1y;
        application/json                1h;
        ~image/svg\+xml                 1M;
        ~image/                         6M;
        ~font/                          1y;
        application/font-woff           1y;
        application/font-woff2          1y;
        application/vnd.ms-fontobject   1y;
        font/truetype                   1y;
        font/opentype                   1y;
    }

    # Enhanced static file caching with file extension mapping
    map $uri $cache_control {
        default                         "no-cache, no-store, must-revalidate";
        ~*\.(js|css)$                   "public, max-age=31536000, immutable";
        ~*\.(png|jpg|jpeg|gif|ico|svg)$ "public, max-age=15552000";
        ~*\.(woff|woff2|ttf|eot|otf)$   "public, max-age=31536000, immutable";
        ~*\.(json|xml)$                 "public, max-age=3600";
        ~*\.(html|htm)$                 "no-cache, no-store, must-revalidate";
    }

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Security
        server_tokens off;
        
        # Set expires headers
        expires $expires;

        # Health check endpoint for container monitoring
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Alternative health check using static file
        location = /health.txt {
            access_log off;
            try_files /health /health.txt =404;
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Optimized static assets serving with advanced caching
        location ~* \.(js|css)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Vary "Accept-Encoding";
            
            # Try compressed versions first
            location ~* \.js$ {
                try_files $uri.br $uri.gz $uri =404;
                add_header Content-Encoding br;
                add_header Vary "Accept-Encoding";
            }
            
            location ~* \.css$ {
                try_files $uri.br $uri.gz $uri =404;
                add_header Content-Encoding br;
                add_header Vary "Accept-Encoding";
            }
        }

        # Images with optimized caching
        location ~* \.(png|jpg|jpeg|gif|ico|svg|webp|avif)$ {
            expires 6M;
            add_header Cache-Control "public, max-age=15552000";
            add_header Vary "Accept-Encoding";
            
            # CORS for images
            add_header Access-Control-Allow-Origin "*";
        }

        # Fonts with long-term caching
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            
            # CORS for fonts
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Range";
        }

        # JSON and XML files with moderate caching
        location ~* \.(json|xml)$ {
            expires 1h;
            add_header Cache-Control "public, max-age=3600";
            add_header Vary "Accept-Encoding";
        }

        # API proxy with enhanced configuration for container communication
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Container-to-container communication
            proxy_pass http://qwen-api:8000/;
            proxy_http_version 1.1;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # CORS headers for cross-container requests
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, X-CSRF-Token, X-API-Key" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Max-Age 86400 always;
            
            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
                add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, X-CSRF-Token, X-API-Key" always;
                add_header Access-Control-Allow-Credentials true always;
                add_header Access-Control-Max-Age 86400 always;
                add_header Content-Type text/plain;
                add_header Content-Length 0;
                return 204;
            }
            
            # Enhanced timeouts for API operations
            proxy_connect_timeout 60s;
            proxy_send_timeout 120s;
            proxy_read_timeout 300s;
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 /api_error.html;
        }

        # WebSocket proxy for real-time updates with CORS support
        location /ws {
            proxy_pass http://qwen-api:8000/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # CORS headers for WebSocket connections
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials true always;
            
            # WebSocket specific timeouts
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_connect_timeout 60s;
            
            # Disable buffering for real-time communication
            proxy_buffering off;
            proxy_cache off;
        }

        # Upload endpoint with special rate limiting and CORS
        location /upload {
            limit_req zone=upload burst=10 nodelay;
            
            proxy_pass http://qwen-api:8000/upload;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # CORS headers for upload requests
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, X-CSRF-Token, X-API-Key" always;
            add_header Access-Control-Allow-Credentials true always;
            
            # Handle preflight OPTIONS requests for uploads
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Methods "POST, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, X-CSRF-Token, X-API-Key" always;
                add_header Access-Control-Allow-Credentials true always;
                add_header Access-Control-Max-Age 86400 always;
                add_header Content-Type text/plain;
                add_header Content-Length 0;
                return 204;
            }
            
            # Large file upload settings
            client_max_body_size 50M;
            proxy_request_buffering off;
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # API error page for backend connection issues
        location = /api_error.html {
            internal;
            root /usr/share/nginx/html;
            add_header Content-Type text/html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # React Router - serve index.html for all routes with optimized handling
        location / {
            # Try static files first, then directories, finally fallback to index.html
            try_files $uri $uri/ @fallback;
            
            # Cache control for HTML files - no caching for dynamic content
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Fallback location for React Router
        location @fallback {
            # Serve compressed index.html if available
            try_files /index.html.br /index.html.gz /index.html =404;
            
            # No caching for the main HTML file
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Deny access to backup files
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}