# =============================================================================
# Staging Nginx Configuration for Qwen2 Frontend
# =============================================================================

# Staging-optimized nginx configuration
# This configuration balances production-like settings with debugging capabilities:
# - Enhanced security but with debugging features
# - Performance optimizations with detailed logging
# - Source maps enabled for debugging
# - Comprehensive monitoring and health checks

worker_processes auto;
error_log /var/log/nginx/error.log info;
pid /tmp/nginx/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    # Basic MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Staging logging format (detailed for debugging)
    log_format staging_detailed '$remote_addr - $remote_user [$time_local] '
                               '"$request" $status $body_bytes_sent '
                               '"$http_referer" "$http_user_agent" '
                               'rt=$request_time uct="$upstream_connect_time" '
                               'uht="$upstream_header_time" urt="$upstream_response_time" '
                               'cache="$upstream_cache_status"';

    access_log /var/log/nginx/access.log staging_detailed;

    # Staging performance settings (optimized but debuggable)
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    server_tokens off;

    # Enhanced gzip compression for staging
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;

    # Brotli compression (if available)
    brotli on;
    brotli_comp_level 6;
    brotli_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Staging upstream for backend API
    upstream backend_api_staging {
        server qwen-api-staging:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Rate limiting for staging (moderate)
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=20r/m;
    limit_req_zone $binary_remote_addr zone=general_limit:10m rate=100r/m;

    # Staging server configuration
    server {
        listen 80;
        server_name staging.localhost staging.yourdomain.com *.staging.yourdomain.com;
        root /usr/share/nginx/html;
        index index.html;

        # Staging security headers (enhanced but debuggable)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        
        # Staging-specific headers
        add_header X-Environment "staging" always;
        add_header X-Version "2.0.0-staging" always;
        add_header X-Debug-Mode "limited" always;

        # Content Security Policy for staging (relaxed for debugging)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; frame-ancestors 'none';" always;

        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        error_page 403 /403.html;

        # Health check endpoint with detailed info
        location /health {
            access_log off;
            return 200 '{"status":"healthy","environment":"staging","version":"2.0.0-staging","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Staging info endpoint
        location /staging-info {
            return 200 '{"environment":"staging","features":{"sourceMaps":true,"debugging":true,"monitoring":true},"backend":"qwen-api-staging:8000"}';
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache";
        }

        # API proxy with staging settings and rate limiting
        location /api/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://backend_api_staging/api/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Staging timeouts (balanced)
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Staging CORS headers (controlled)
            add_header Access-Control-Allow-Origin "https://staging.yourdomain.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            add_header Access-Control-Allow-Credentials "true" always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "https://staging.yourdomain.com";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # WebSocket proxy for staging
        location /ws/ {
            proxy_pass http://backend_api_staging/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # Static files with staging caching (moderate)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1d;
            add_header Cache-Control "public, no-transform";
            add_header X-Environment "staging";
            
            # Try compressed versions first
            location ~* \.(js|css)$ {
                gzip_static on;
                brotli_static on;
                expires 1d;
            }
        }

        # Source maps (enabled for staging debugging)
        location ~* \.map$ {
            expires 1h;
            add_header Cache-Control "public, no-transform";
            add_header X-Debug "source-map-staging";
            
            # Restrict source map access to internal networks (optional)
            # allow 10.0.0.0/8;
            # allow 172.16.0.0/12;
            # allow 192.168.0.0/16;
            # deny all;
        }

        # React Router support (SPA) with staging caching
        location / {
            limit_req zone=general_limit burst=50 nodelay;
            
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            add_header X-Environment "staging";
        }

        # Build info endpoint
        location /build-info {
            alias /usr/share/nginx/html/build-info.json;
            add_header Content-Type application/json;
            add_header Cache-Control "public, max-age=3600";
        }

        # Staging metrics endpoint (for monitoring)
        location /metrics {
            stub_status on;
            access_log off;
            add_header Content-Type text/plain;
            
            # Restrict access to monitoring systems
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Staging debugging endpoints (restricted)
        location /debug/ {
            alias /usr/share/nginx/html/debug/;
            autoindex on;
            add_header X-Debug-Access "staging";
            
            # Restrict debug access
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    }
}